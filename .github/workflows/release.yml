name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    types: [closed]
    branches: [ main ]

jobs:
  build-and-release:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install FFmpeg
      run: |
        brew install ffmpeg
        echo "FFMPEG_PATH=/opt/homebrew/bin/ffmpeg" >> $GITHUB_ENV

    - name: Calculate new version
      id: version
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        IFS='.' read -ra VERSION <<< "${latest_tag#v}"
        MAJOR=${VERSION[0]}
        MINOR=${VERSION[1]}
        PATCH=${VERSION[2]}
        
        COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"%s")
        
        BUMP_TYPE="patch"
        
        while IFS= read -r commit; do
          if [[ $commit == *"BREAKING CHANGE:"* ]] || [[ $commit == *"!"* ]]; then
            BUMP_TYPE="major"
            break
          elif [[ $commit == "feat:"* ]]; then
            BUMP_TYPE="minor"
          fi
        done <<< "$COMMITS"
        
        case $BUMP_TYPE in
          "major")
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          "minor")
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          "patch")
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        
        echo "new_version_plain=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: v$NEW_VERSION"

    - name: Update package.json version
      run: |
        NEW_VERSION=${{ steps.version.outputs.new_version_plain }}
        jq ".version = \"$NEW_VERSION\"" package.json > tmp.$$.json && mv tmp.$$.json package.json

    - name: Install dependencies
      run: npm install

    - name: Build MacOS App
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        FFMPEG_PATH: ${{ env.FFMPEG_PATH }}
      run: npm run build:mac

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        name: Release ${{ steps.version.outputs.new_version }}
        draft: false
        prerelease: false
        files: |
          dist/*.dmg
          dist/*.zip
        body: |
          Release ${{ steps.version.outputs.new_version }}
          
          ## Installation Instructions
          
          ### Method 1: Quick Install (Terminal)
          1. Download and install the app
          2. Open Terminal
          3. Run: `sudo xattr -cr "/Applications/Video Converter.app"`
          4. Open the app from Applications folder
          
          ### Method 2: Manual Install
          1. Download and install the app
          2. Right-click the app and hold Option key
          3. Select "Open" and confirm
          
          ## Changes in this release:
          ${{ join(github.event.commits.*.message, '\n') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} 